-- This script was generated by a beta version of the ERD tool in pgAdmin 4.
-- Please log an issue at https://redmine.postgresql.org/projects/pgadmin4/issues/new if you find any bugs, including reproduction steps.
BEGIN;


CREATE TABLE IF NOT EXISTS public."Post"
(
    id_post SERIAL,
    content text COLLATE pg_catalog."default",
    id_user integer NOT NULL,
	"created_at" timestamp with time zone,
    "updated_at" timestamp with time zone,
    PRIMARY KEY (id_post)
);

CREATE TABLE IF NOT EXISTS public."User"
(
    "id_user" SERIAL,
    name character varying(50) COLLATE pg_catalog."default",
    gender smallint,
    email character varying(50) COLLATE pg_catalog."default",
    password character varying COLLATE pg_catalog."default",
    image character varying(255) COLLATE pg_catalog."default",
    dob date,
    content character varying(255) COLLATE pg_catalog."default",
    "role" integer,
    "created_at" timestamp with time zone,
    "updated_at" timestamp with time zone,
    CONSTRAINT "User_pkey" PRIMARY KEY ("id_user")
);

CREATE TABLE IF NOT EXISTS public."Like_Post"
(
    id_lp SERIAL,
    id_user integer,
    id_post integer,
	"created_at" timestamp with time zone,
    PRIMARY KEY (id_lp)
);

CREATE TABLE IF NOT EXISTS public."Comment"
(
    id_com SERIAL,
    content text,
    id_user integer,
    id_post integer,
    "created_at" timestamp with time zone,
    "updated_at" timestamp with time zone,
    PRIMARY KEY (id_com)
);

CREATE TABLE IF NOT EXISTS public."Photo"
(
    id_photo SERIAL,
    url character varying(255),
    belong character varying(15),
    id_post integer,
    "created_at" timestamp with time zone,
    "updated_at" timestamp with time zone,
    PRIMARY KEY (id_photo)
);

CREATE TABLE IF NOT EXISTS public."Like_Comment"
(
    id_lc SERIAL,
    id_user integer,
    id_com integer,
	"created_at" timestamp with time zone,
    PRIMARY KEY (id_lc)
);

CREATE TABLE IF NOT EXISTS public."Follow"
(
    id_fol SERIAL,
    id_follower integer,
    id_followee integer,
    PRIMARY KEY (id_follower)
);

ALTER TABLE IF EXISTS public."Post"
    ADD CONSTRAINT fk_id_user FOREIGN KEY (id_user)
    REFERENCES public."User" ("id_user") MATCH SIMPLE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."Like_Post"
    ADD FOREIGN KEY (id_user)
    REFERENCES public."User" ("id_user") MATCH SIMPLE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."Like_Post"
    ADD FOREIGN KEY (id_post)
    REFERENCES public."Post" (id_post) MATCH SIMPLE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."Comment"
    ADD FOREIGN KEY (id_user)
    REFERENCES public."User" ("id_user") MATCH SIMPLE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."Comment"
    ADD FOREIGN KEY (id_post)
    REFERENCES public."Post" (id_post) MATCH SIMPLE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."Photo"
    ADD FOREIGN KEY (id_post)
    REFERENCES public."Post" (id_post) MATCH SIMPLE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."Like_Comment"
    ADD FOREIGN KEY (id_user)
    REFERENCES public."User" ("id_user") MATCH SIMPLE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."Like_Comment"
    ADD FOREIGN KEY (id_com)
    REFERENCES public."Comment" (id_com) MATCH SIMPLE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."Follow"
    ADD FOREIGN KEY (id_follower)
    REFERENCES public."User" ("id_user") MATCH SIMPLE
    ON DELETE CASCADE
    NOT VALID;


ALTER TABLE IF EXISTS public."Follow"
    ADD FOREIGN KEY (id_followee)
    REFERENCES public."User" ("id_user") MATCH SIMPLE
    ON DELETE CASCADE
    NOT VALID;

END;